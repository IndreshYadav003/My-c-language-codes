#include <stdio.h>
#include <stdlib.h>

void swap(int *heap, int l, int r) {
    int temp = heap[l];
    heap[l] = heap[r];
    heap[r] = temp;
}

void push_up_in_minheap(int *heap, int index) {
    int parent_index = (index - 1) / 2;

    if (index == 0 || heap[parent_index] < heap[index]) {
        return;
    }

    swap(heap, index, parent_index);
    push_up_in_minheap(heap, parent_index);
}

void push_up_in_maxheap(int *heap, int index) {
    int parent_index = (index - 1) / 2;

    if (index == 0 || heap[parent_index] > heap[index]) {
        return;
    }

    swap(heap, index, parent_index);
    push_up_in_maxheap(heap, parent_index);
}

void insert_in_minheap(int *heap, int element, int *size) {
    heap[*size] = element;
    int index = *size;
    (*size)++;
    push_up_in_minheap(heap, index);
}

void insert_in_maxheap(int *heap, int element, int *size) {
    heap[*size] = element;
    int index = *size;
    (*size)++;
    push_up_in_maxheap(heap, index);
}

void push_down_in_minheap(int *heap, int index, int n) {
    if (index == n) {
        return;
    }

    int left = (2 * index) + 1;
    int right = (2 * index) + 2;
    int smallest = index;

    if (left <= n && heap[left] < heap[smallest]) {
        smallest = left;
    }

    if (right <= n && heap[right] < heap[smallest]) {
        smallest = right;
    }

    if (smallest == index) {
        return;
    }

    swap(heap, index, smallest);
    push_down_in_minheap(heap, smallest, n);
}

void delete_in_minheap(int *heap, int *size) {
    swap(heap, 0, *size - 1);
    (*size)--;
    push_down_in_minheap(heap, 0, *size - 1);
}

void push_down_in_maxheap(int *heap, int index, int n) {
    if (index == n) {
        return;
    }

    int left = (2 * index) + 1;
    int right = (2 * index) + 2;
    int greatest = index;

    if (left <= n && heap[left] > heap[greatest]) {
        greatest = left;
    }

    if (right <= n && heap[right] > heap[greatest]) {
        greatest = right;
    }

    if (greatest == index) {
        return;
    }

    swap(heap, index, greatest);
    push_down_in_maxheap(heap, greatest, n);
}

void delete_in_maxheap(int *heap, int *size) {
    swap(heap, 0, *size - 1);
    (*size)--;
    push_down_in_maxheap(heap, 0, *size - 1);
}

void heapify(int *arr, int n) {
    int first_non_leaf_node = ((n - 1) - 1) / 2;

    for (int i = first_non_leaf_node; i >= 0; i--) {
        push_down_in_minheap(arr, i, n - 1);
    }
}

void push_down_in_Minheap(int *heap, int index, int n) {
    if (index == n) {
        return;
    }

    int left = (2 * index) + 1;
    int right = (2 * index) + 2;
    int smallest = index;

    if (left <= n && heap[left] < heap[smallest]) {
        smallest = left;
    }

    if (right <= n && heap[right] < heap[smallest]) {
        smallest = right;
    }

    if (smallest == index) {
        return;
    }

    swap(heap, index, smallest);
    push_down_in_minheap(heap, smallest, n);
}

void heapsort(int *arr, int n) {
    heapify(arr, n);

    for (int i = n - 1; i > 0; i--) {
        swap(arr, 0, i);
        push_down_in_Minheap(arr, 0, i - 1);
    }
}

void Heapify1(int *arr, int n) {
    int first_non_leaf_node = ((n - 1) - 1) / 2;

    for (int i = first_non_leaf_node; i >= 0; i--) {
        push_down_in_Minheap(arr, i, n - 1);
    }
}

void push_down_in_Maxheap(int *heap, int index, int n) {
    if (index == n) {
        return;
    }

    int left = (2 * index) + 1;
    int right = (2 * index) + 2;
    int greatest = index;

    if (left <= n && heap[left] > heap[greatest]) {
        greatest = left;
    }

    if (right <= n && heap[right] > heap[greatest]) {
        greatest = right;
    }

    if (greatest == index) {
        return;
    }

    swap(heap, index, greatest);
    push_down_in_minheap(heap, greatest, n);
}

void Heapsort1(int *arr, int n) {
    heapify(arr, n);

    for (int i = n - 1; i > 0; i--) {
        swap(arr, 0, i);
        push_down_in_Minheap(arr, 0, i - 1);
    }
}

int main() {
    int heap[7];
    int size = 0;

    insert_in_minheap(heap, 90, &size);
    insert_in_minheap(heap, 80, &size);
    insert_in_minheap(heap, 70, &size);
    insert_in_minheap(heap, 20, &size);
    insert_in_minheap(heap, 10, &size);
    insert_in_minheap(heap, 50, &size);
    insert_in_minheap(heap, 60, &size);

    for (int i = 0; i < size; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");

    heapify(heap, size);

    for (int i = 0; i < size; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");

    heapsort(heap, size);

    for (int i = 0; i < size; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");

    Heapify1(heap, size);

    for (int i = 0; i < size; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");

    Heapsort1(heap, size);

    for (int i = 0; i < size; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");

    return 0;
}


